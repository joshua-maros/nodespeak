#include "Expressions.h"

namespace waveguide {
namespace grammar {

////////////////////////////////////////////////////////////////////////////////
// IdentifierExp
////////////////////////////////////////////////////////////////////////////////
IdentifierExp::IdentifierExp(std::string name)
    : name{name} { }

////////////////////////////////////////////////////////////////////////////////
// IntExp
////////////////////////////////////////////////////////////////////////////////
IntExp::IntExp(int value)
    : value{value} { }

////////////////////////////////////////////////////////////////////////////////
// FloatExp
////////////////////////////////////////////////////////////////////////////////
FloatExp::FloatExp(float value)
    : value{value} { }

////////////////////////////////////////////////////////////////////////////////
// BoolExp
////////////////////////////////////////////////////////////////////////////////
BoolExp::BoolExp(bool value)
    : value{value} { }

////////////////////////////////////////////////////////////////////////////////
// AccessExp
////////////////////////////////////////////////////////////////////////////////
AccessExp::AccessExp(std::shared_ptr<IdentifierExp> rootVar)
    : rootVar{rootVar} { }

void AccessExp::addIndexAccessor(std::shared_ptr<Expression> index) {
    accessors.push_back(index);
}

void AccessExp::addMemberAccessor(std::shared_ptr<std::string> member) {
    accessors.push_back(member);
}

////////////////////////////////////////////////////////////////////////////////
// ExpList
////////////////////////////////////////////////////////////////////////////////
ExpList::ExpList(std::shared_ptr<Expression> a)
    : exps{a} { }

ExpList::ExpList(std::shared_ptr<Expression> a, std::shared_ptr<Expression> b)
    : exps{a, b} { }

ExpList::ExpList(std::shared_ptr<Expression> a, std::shared_ptr<ExpList> b)
    : exps{a} {
    for (auto expression : b->getExps()) {
        exps.push_back(expression);
    }
}

////////////////////////////////////////////////////////////////////////////////
// ArrayLiteral
////////////////////////////////////////////////////////////////////////////////
ArrayLiteral::ArrayLiteral(std::shared_ptr<ExpList> elements)
    : elements{elements} { }

////////////////////////////////////////////////////////////////////////////////
// Range
////////////////////////////////////////////////////////////////////////////////
Range::Range(std::shared_ptr<Expression> start, std::shared_ptr<Expression> end)
    : start{start}, end{end} { }

Range::Range(std::shared_ptr<Expression> start, std::shared_ptr<Expression> end,
    std::shared_ptr<Expression> step)
    : start{start}, end{end}, step{step} { }

}
}