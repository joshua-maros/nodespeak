block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
line_comment = _{ "//" ~ (!"\n" ~ ANY)* ~ (EOI | "\n") }
COMMENT = _{ block_comment | line_comment }
WHITESPACE = _{ " " | "\t" | "\n" | "\r\n" }

dec_int = @{ (ASCII_DIGIT | "_")+ }
bin_int = @{ "0b" ~ (ASCII_BIN_DIGIT | "_")+ }
oct_int = @{ "0o" ~ (ASCII_OCT_DIGIT | "_")+ }
hex_int = @{ "0x" ~ (ASCII_HEX_DIGIT | "_")+ }
legacy_oct_int = @{ "0" ~ (ASCII_OCT_DIGIT | "_")+ }

int = _{ bin_int | hex_int | oct_int | legacy_oct_int | dec_int }
dec_digit = _{ ASCII_DIGIT | "_" }
float = @{
    (dec_digit* ~ "." ~ dec_digit+ ~ ("e" ~ ("+" | "-")? ~ dec_digit+)?)
    | (dec_digit+ ~ "." ~ ("e" ~ ("+" | "-")? ~ dec_digit+)?)
    | (dec_digit+ ~ "e" ~ ("+" | "-")? ~ dec_digit+)
}

literal = _{ float | int }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// Expressions

array_literal = { "[" ~ (expr ~ ("," ~ expr)*)? ~ "]" }

expr_part_1 = { 
    literal | func_expr | identifier | "(" ~ expr ~ ")" | array_literal 
}

index_expr = {
    expr_part_1 ~ ("[" ~ expr ~ "]")+
}

negate = { "-" ~ (expr_part_1 | index_expr) }

expr_part_2 = _{
    negate | index_expr | expr_part_1
}

expr_part = { expr_part_2 }

// Operator precedence is done after parsing, because it is inneficient to build
// it into the grammar.
operator = { 
    "**" | "*" | "//" | "/" | "%" | "+" | "-"
    | "<=" | ">=" | "<" | ">" | "==" | "!="
    | "band" | "bnand" | "bor" | "bnor" | "bxor" | "bxnor"
    | "and" | "nand" | "or" | "nor" | "xor" | "xnor"
}

expr = { expr_part ~ (operator ~ expr_part)* }

// Function calls (part of expressions, so they are called function expressions.)

func_expr_input_list = { "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }
inline_output = { "inline" }
inline_var_dec = { data_type ~ identifier }
func_expr_output = _{ inline_var_dec | assign_expr | inline_output }
func_expr_output_list = { ":" ~ "(" ~ (func_expr_output~ ("," ~ func_expr_output)*)? ~ ")" }
func_expr = { identifier ~ func_expr_input_list ~ func_expr_output_list? }

// Data types.

named_data_type = { identifier }
dynamic_data_type = { "{" ~ expr ~ "}" }
basic_data_type = { named_data_type | dynamic_data_type }
array_data_type = { ("[" ~ expr ~ "]")+ ~ basic_data_type }
data_type = { array_data_type | basic_data_type }

// Function definitions (techincally part of statements.)

named_function_parameter = { data_type ~ identifier }
function_inputs = { "(" ~ (
    named_function_parameter ~ ("," ~ named_function_parameter)*
)? ~ ")" }
function_outputs = { ":" ~ "(" ~ (
    named_function_parameter ~ ("," ~ named_function_parameter)*
)? ~ ")" }
single_function_output = { ":" ~ data_type }

function_signature = {
    (function_inputs ~ (function_outputs | single_function_output)?)
    | (function_outputs | single_function_output)?
}
function_definition = { 
    "fn" ~ identifier ~ function_signature ~ returnable_code_block 
}

// If statements.
else_if_clause = { "else" ~ "if" ~ expr ~ code_block }
else_clause = { "else" ~ code_block }
if_statement = { "if" ~ expr ~ code_block ~ (else_if_clause)* ~ (else_clause)? }

// For loop statements.
for_loop_statement = { "for" ~ identifier ~ "=" ~ expr ~ "to" ~ expr ~ code_block }

// Statements.

empty_variable = { identifier }
assigned_variable = { identifier ~ "=" ~ expr }
create_variable = _{ assigned_variable | empty_variable }
create_variable_statement = { 
    data_type ~ create_variable ~ ("," ~ create_variable)* ~ ";"
}

input_variable_statement = {
    "input" ~ data_type ~ identifier ~ ("," ~ identifier)* ~ ";"
}
output_variable_statement = {
    "output" ~ data_type ~ identifier ~ ("," ~ identifier)* ~ ";"
}

assign_array_access = { "[" ~ expr ~ "]" }
assign_expr = { identifier ~ (assign_array_access)* }
assign_statement = { assign_expr ~ "=" ~ expr ~ ";" }

raw_expr_statement = _{ expr ~ ";" }

code_block = { "{" ~ statement* ~ "}" }

returnable_code_block = { "{" ~ statement* ~ expr? ~ "}" }

return_statement = { "return" ~ (expr ~ ("," ~ expr)*)? ~ ";" }

assert_statement = { "assert" ~ expr ~ ";" }

statement = { 
    function_definition | code_block | return_statement | assert_statement
    | if_statement | for_loop_statement
    | input_variable_statement | output_variable_statement | create_variable_statement 
    | assign_statement | raw_expr_statement  
}

root = { SOI ~ statement* ~ EOI }